@page "/generatechart"

@using System.Text
@using System.Text.Json
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using MauiApp1.Services
@using SkiaSharp
@using Svg.Skia
@using System.IO
@using Microsoft.Maui.Storage
@using MauiApp1.Models
@inject CsvDataService CsvDataService
@inject IConfigService ConfigService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h2>Generate and Upload Charts</h2>
    <p>Select the files you want to process, then click "Generate Charts".</p>

    @if (unprocessedFiles.Any())
    {
        <div class="file-list mb-3">
            @foreach (var file in unprocessedFiles)
            {
                <div class="form-check file-item">
                    <input class="form-check-input" type="checkbox" @bind="file.IsSelected" />
                    <label class="form-check-label @(file.IsFailed ? "text-danger" : "")">
                        @file.Name @if (file.IsFailed)
                        {
                            <span>(Failed)</span>
                        }
                        else
                        {
                            <span>(not processed)</span>
                        }
                    </label>
                </div>
            }
        </div>
        <button @onclick="GenerateAndUploadChartImages" class="btn btn-primary" disabled="@(!unprocessedFiles.Any(f => f.IsSelected))">Generate Charts</button>
    }
    else
    {
        <div class="alert alert-info mt-3" role="alert">
            No files available to process.
        </div>
    }

    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert @alertClass mt-3" role="alert">
            @alertMessage
        </div>
    }
</div>

@code {
    private ConfigModel configModel = new ConfigModel();
    private List<HashSet<int>> activeCellsColumn = new();
    private bool isHorizontal = false;
    private int numTouches;
    private int count;
    private int highlightTouch = 0;
    private string xAxisTitle = "X-Axis";
    private string yAxisTitle = "Y-Axis";
    private string figureName = "Activity Graph";

    private int maxCycles = 0;
    private int minCell = 0;
    private int maxCell = 100;
    private int minTouch = 0;
    private int maxTouch = 100;
    private float originalCellWidth = 15;
    private float originalCellHeight = 3;
    private float cellWidth = 15;
    private float cellHeight = 3;
    private const int cellPadding = 1;
    private float chartPadding = 110;
    private float chartWidth = 800;
    private float chartHeight = 600;
    private HeatmapInputModel heatmapInputModel = new HeatmapInputModel();

    private string alertMessage = string.Empty;
    private string alertClass = string.Empty;

    private List<FileStatus> unprocessedFiles = new List<FileStatus>();

    protected override async Task OnInitializedAsync()
    {
        configModel = await ConfigService.LoadConfigAsync();
        await LoadUnprocessedFilesAsync();
        await LoadConfigurationAsync();
    }

    private async Task LoadConfigurationAsync()
    {
        //loading charts configuration from locally saved json file
        var filePath = Path.Combine(FileSystem.AppDataDirectory, "chartConfig.json");
        if (File.Exists(filePath))
        {
            var json = await File.ReadAllTextAsync(filePath);
            heatmapInputModel = JsonSerializer.Deserialize<HeatmapInputModel>(json);
        }
        else
        {
            alertMessage = "Configuration file not found.";
            alertClass = "alert-danger";
        }
    }

    private async Task LoadUnprocessedFilesAsync()
    {
        var blobServiceClient = new BlobServiceClient(configModel.ConnectionString);
        var containerClient = blobServiceClient.GetBlobContainerClient(configModel.FileContainerName);

        unprocessedFiles.Clear();

        //running a loop on each file in the file container
        await foreach (var blobItem in containerClient.GetBlobsAsync())
        {
            // Check if the file is already in the success or failed folder
            if (!blobItem.Name.StartsWith("success/") && !blobItem.Name.StartsWith("failed/"))
            {
                //adding the file as unprocessed file in the list
                unprocessedFiles.Add(new FileStatus { Name = blobItem.Name, IsFailed = false });
            }
        }

        StateHasChanged();
    }

    public async Task GenerateAndUploadChartImages()
    {
        //generating a list of selected files from the unprocessed files list
        var selectedFiles = unprocessedFiles.Where(f => f.IsSelected).ToList();

        if (!selectedFiles.Any())
        {
            alertMessage = "No files selected for processing.";
            alertClass = "alert-danger";
            return;
        }

        var blobServiceClient = new BlobServiceClient(configModel.ConnectionString);
        var containerClient = blobServiceClient.GetBlobContainerClient(configModel.FileContainerName);

        //running a loop on selected files to use in chart configuration to generate charts
        foreach (var file in selectedFiles)
        {
            var blobClient = containerClient.GetBlobClient(file.Name);
            var response = await blobClient.DownloadAsync();

            try
            {
                using (var stream = new MemoryStream())
                {
                    await response.Value.Content.CopyToAsync(stream);
                    stream.Position = 0;

                    var result = await CsvDataService.ReadDataFromCsvAsync(stream);
                    activeCellsColumn = result.Item1;
                    //generating the chart
                    await GenerateChartAsync();

                    var svgContent = GenerateSvgContent();
                    var fileName = $"{Path.GetFileNameWithoutExtension(file.Name)}.png";
                    //saving the image as svg
                    await SaveSvgAsImageAsync(svgContent, fileName);

                    var imageBlobClient = new BlobClient(configModel.ConnectionString, configModel.ImageContainerName, fileName);
                    using var imageStream = File.OpenRead(Path.Combine(FileSystem.CacheDirectory, fileName));
                    //uploading the file in image container
                    await imageBlobClient.UploadAsync(imageStream, true);

                    // Moving original file to "success" folder
                    await MoveBlobToFolderAsync(containerClient, blobClient, "success");

                    // Removing successfully processed file from the list
                    unprocessedFiles.Remove(file);
                }

                alertMessage = $"All files processed and uploaded successfully!";
                alertClass = "alert-success";
            }
            catch (Exception ex)
            {
                // Moving original file to "failed" folder
                await MoveBlobToFolderAsync(containerClient, blobClient, "failed");

                // Marking the file as failed
                file.IsFailed = true;

                alertMessage = $"Some files failed to process. Please check the list.";
                alertClass = "alert-danger";
            }
        }

        StateHasChanged();
    }

    private async Task MoveBlobToFolderAsync(BlobContainerClient containerClient, BlobClient blobClient, string folderName)
    {
        var newBlobName = $"{folderName}/{blobClient.Name}";
        var newBlobClient = containerClient.GetBlobClient(newBlobName);

        // Start the copy operation
        await newBlobClient.StartCopyFromUriAsync(blobClient.Uri);

        // Wait for the copy operation to complete
        BlobProperties properties;
        do
        {
            await Task.Delay(500);
            properties = await newBlobClient.GetPropertiesAsync();
        }
        while (properties.CopyStatus == CopyStatus.Pending);

        // Check if the copy operation was successful
        if (properties.CopyStatus == CopyStatus.Success)
        {
            // Delete the original blob
            await blobClient.DeleteAsync();
        }
        else
        {
            throw new Exception($"Failed to copy blob to {newBlobName}. Copy status: {properties.CopyStatus}");
        }
    }

    private async Task GenerateChartAsync()
    {
        highlightTouch = heatmapInputModel.HighlightTouch - 1;
        figureName = heatmapInputModel.FigureName;
        xAxisTitle = heatmapInputModel.XAxisTitle;
        yAxisTitle = heatmapInputModel.YAxisTitle;
        isHorizontal = heatmapInputModel.IsHorizontal;
        numTouches = Math.Min(activeCellsColumn.Count, heatmapInputModel.MaxCycles.HasValue ?
            heatmapInputModel.MaxCycles.Value : 1000);

        if (isHorizontal)
        {
            cellWidth = originalCellHeight;
            cellHeight = originalCellWidth;
        }
        else
        {
            cellWidth = originalCellWidth;
            cellHeight = originalCellHeight;
        }

        CalculateChartDimensions();
        StateHasChanged();
    }

    private void CalculateChartDimensions()
    {
        minCell = int.MaxValue;
        maxCell = int.MinValue;

        foreach (var column in activeCellsColumn)
        {
            if (column.Any())
            {
                int currentMin = column.Min();
                int currentMax = column.Max();

                if (currentMin < minCell)
                    minCell = currentMin;
                if (currentMax > maxCell)
                    maxCell = currentMax;
            }
        }

        if (minCell == int.MaxValue && maxCell == int.MinValue)
        {
            minCell = 0;
            maxCell = 0;
        }

        minTouch = 0;
        maxTouch = numTouches;

        if (isHorizontal)
        {
            int cellRangeSpan = activeCellsColumn.Max(col => col.Max()) + 1 - minCell;
            chartWidth = (cellRangeSpan * (cellWidth - 2)) + chartPadding + 200;
            chartHeight = (numTouches * (cellHeight + cellPadding)) + chartPadding + 50;
        }
        else
        {
            int cellRangeSpan = activeCellsColumn.Max(col => col.Max()) + 1 - minCell;
            chartHeight = (cellRangeSpan * (cellHeight - 2)) + chartPadding + 50;
            chartWidth = (numTouches * (cellWidth + cellPadding)) + chartPadding + 200;
        }
    }
    //Dynamically generate labels for axis when working with horizontal chart
    private IEnumerable<(string label, int pos)> GenerateAxisLabels(int min, int max, bool isVertical)
    {
        var labels = new List<(string label, int pos)>();
        if (min > 0 && min < 10)
        {
            min = 0;
        }
        int range = max - min;

        // Determine the magnitude of the range to set an appropriate step value.
        int magnitude = (int)Math.Pow(10, (int)Math.Log10(range) - 1);

        int step;

        try
        {
            step = (range / magnitude < 5) ? magnitude : magnitude * 5;
        }
        catch (Exception ex)
        {
            step = 5;
        }

        string label;
        int pos;

        // Generate labels based on the calculated step value.
        for (int i = min; i <= max; i += step)
        {
            label = i.ToString();

            if (isVertical)
            {
                // Adjust position calculation for vertical orientation
                pos = Convert.ToInt32(((float)(i - min) * (cellHeight - 2)));
            }
            else
            {
                // Adjust position calculation for horizontal orientation
                pos = Convert.ToInt32(((float)(i - min) * ((cellWidth - 1) + cellPadding)) + chartPadding);
            }

            labels.Add((label, pos));
        }

        // Ensure the last label is always added at the end of the axis.
        if (!labels.Any(l => l.label == max.ToString()))
        {
            if (isVertical)
            {
                pos = Convert.ToInt32(((float)(max - min) * (cellHeight - 2)));
                labels.Add((max.ToString(), pos));
            }
            else
            {
                pos = Convert.ToInt32(((float)(max - min) * ((cellWidth - 1) + cellPadding)) + chartPadding);
                labels.Add((max.ToString(), pos));
            }

            return labels;
        }
        return labels;
    }

    //Dynamically generate labels for axis when working with vertical chart
    private IEnumerable<(string label, int pos)> GenerateAxisLabelsVertical(int min, int max, bool isVertical)
    {
        var labels = new List<(string label, int pos)>();
        if (min > 0 && min < 10)
        {
            min = 0;
        }
        int range = max - min;

        // Determine the magnitude of the range to set an appropriate step value.
        int magnitude = (int)Math.Pow(10, (int)Math.Log10(range) - 1);
        int step;

        try
        {
            step = (range / magnitude < 5) ? magnitude : magnitude * 5;
        }
        catch (Exception ex)
        {
            step = 5;
        }

        string label;
        int pos;

        // Generate labels based on the calculated step value.
        for (int i = min; i <= max; i += step)
        {
            label = i.ToString();

            if (isVertical)
            {
                pos = Convert.ToInt32(((float)(i - min) * ((cellHeight - 1) + cellPadding)) + chartPadding) - 12;
            }
            else
            {
                pos = Convert.ToInt32(((float)(i - min) * (cellWidth - 2))) + 100;
            }

            labels.Add((label, pos));
        }

        // Ensure the last label is always added at the end of the axis.
        if (!labels.Any(l => l.label == max.ToString()))
        {
            if (isVertical)
            {
                pos = Convert.ToInt32(((float)(max - min) * ((cellHeight - 1) + cellPadding)) + chartPadding) - 12;
                labels.Add((max.ToString(), pos));
            }
            else
            {
                pos = Convert.ToInt32(((float)(max - min) * (cellWidth - 2))) + 120;
                labels.Add((max.ToString(), pos));
            }

            return labels;
        }
        return labels;
    }

    private string GetCellColor(int rowIndex) => rowIndex == highlightTouch ? "red" : "lightblue";

    private string GenerateSvgContent()
    {
        var svg = new StringBuilder();
        svg.AppendLine($@"<svg xmlns=""http://www.w3.org/2000/svg"" version=""1.1"" width=""{chartWidth}"" height=""{chartHeight}"" style=""border: 1px solid;"">");

        svg.AppendLine($@"<text x=""{chartWidth / 2}"" y=""15"" text-anchor=""middle"" font-size=""16"">{figureName}</text>");

        if (isHorizontal)
        {
            for (int rowIndex = 0; rowIndex < numTouches; rowIndex++)
            {
                var yPos = chartHeight - (rowIndex * (cellHeight + cellPadding)) - chartPadding;
                foreach (var cell in activeCellsColumn[rowIndex])
                {
                    var xPos = ((cell - minCell + 1) * (cellWidth - 2)) + chartPadding;
                    svg.AppendLine($@"<rect x=""{xPos}"" y=""{yPos}"" width=""{cellWidth}"" height=""{cellHeight}"" fill=""{GetCellColor(rowIndex)}"" />");

                    if (rowIndex == highlightTouch)
                    {
                        svg.AppendLine($@"<rect x=""{chartPadding - 50}"" y=""{yPos}"" width=""{chartWidth - chartPadding}"" height=""{cellHeight}"" fill=""none"" stroke=""rgba(255, 0, 0, 0.5)"" stroke-width=""2"" />");
                    }
                }
            }

            svg.AppendLine($@"<line x1=""{chartPadding - 30}"" y1=""40"" x2=""{chartPadding - 30}"" y2=""{chartHeight - chartPadding + 30}"" stroke=""black"" />");
            svg.AppendLine($@"<line x1=""{chartPadding - 30}"" y1=""{chartHeight - chartPadding + 30}"" x2=""{chartWidth - chartPadding + 50}"" y2=""{chartHeight - chartPadding + 30}"" stroke=""black"" />");

            foreach (var label in GenerateAxisLabelsVertical(isHorizontal ? minTouch : minCell, isHorizontal ? maxTouch : maxCell, true))
            {
                svg.AppendLine($@"<text x=""{chartPadding - 35}"" y=""{chartHeight - label.pos}"" text-anchor=""end"" font-size=""12"">{label.label}</text>");
            }

            foreach (var label in GenerateAxisLabelsVertical(isHorizontal ? minCell : minTouch, isHorizontal ? maxCell : maxTouch, false))
            {
                svg.AppendLine($@"<text x=""{label.pos}"" y=""{chartHeight - chartPadding + 45}"" text-anchor=""middle"" font-size=""12"">{label.label}</text>");
            }
        }
        else
        {
            for (int touchIndex = 0; touchIndex < numTouches; touchIndex++)
            {
                var xPos = (touchIndex * (cellWidth + cellPadding)) + chartPadding;
                foreach (var cell in activeCellsColumn[touchIndex])
                {
                    var yPos = chartHeight - ((cell - minCell + 1) * (cellHeight - 2)) - chartPadding;
                    svg.AppendLine($@"<rect x=""{xPos}"" y=""{yPos}"" width=""{cellWidth}"" height=""{cellHeight}"" fill=""{GetCellColor(touchIndex)}"" />");

                    if (touchIndex == highlightTouch)
                    {
                        svg.AppendLine($@"<rect x=""{xPos}"" y=""30"" width=""{cellWidth}"" height=""{chartHeight - chartPadding + 30}"" fill=""none"" stroke=""rgba(255, 0, 0, 0.5)"" stroke-width=""2"" />");
                    }
                }
            }

            svg.AppendLine($@"<line x1=""{chartPadding - 30}"" y1=""30"" x2=""{chartPadding - 30}"" y2=""{chartHeight - chartPadding + 30}"" stroke=""black"" />");
            svg.AppendLine($@"<line x1=""{chartPadding - 30}"" y1=""{chartHeight - chartPadding + 30}"" x2=""{chartWidth - chartPadding + 50}"" y2=""{chartHeight - chartPadding + 30}"" stroke=""black"" />");

            foreach (var label in GenerateAxisLabels(isHorizontal ? minTouch : minCell, isHorizontal ? maxTouch : maxCell, true))
            {
                svg.AppendLine($@"<text x=""{chartPadding - 35}"" y=""{chartHeight - chartPadding - label.pos}"" text-anchor=""end"" font-size=""12"">{label.label}</text>");
            }

            foreach (var label in GenerateAxisLabels(isHorizontal ? minCell : minTouch, isHorizontal ? maxCell : maxTouch, false))
            {
                svg.AppendLine($@"<text x=""{label.pos}"" y=""{chartHeight - chartPadding + 45}"" text-anchor=""middle"" font-size=""12"">{label.label}</text>");
            }
        }

        svg.AppendLine($@"<text x=""5"" y=""{chartHeight / 2}"" text-anchor=""middle"" font-size=""14"">{yAxisTitle}</text>");
        svg.AppendLine($@"<text x=""{chartWidth / 2}"" y=""{chartHeight - 15}"" text-anchor=""middle"" font-size=""14"">{xAxisTitle}</text>");

        svg.AppendLine("</svg>");
        return svg.ToString();
    }


    private async Task SaveSvgAsImageAsync(string svgContent, string filename)
    {
        var svg = new SKSvg();
        svg.FromSvg(svgContent);

        var bitmap = new SKBitmap((int)svg.Picture.CullRect.Width, (int)svg.Picture.CullRect.Height);
        using var canvas = new SKCanvas(bitmap);
        canvas.Clear(SKColors.White);
        canvas.DrawPicture(svg.Picture);
        canvas.Flush();

        using var image = SKImage.FromBitmap(bitmap);
        using var data = image.Encode(SKEncodedImageFormat.Png, 80);

        string folderPath = FileSystem.CacheDirectory;
        string filePath = Path.Combine(folderPath, filename);

        using var stream = File.OpenWrite(filePath);
        data.SaveTo(stream);
    }

    public class FileStatus
    {
        public string Name { get; set; }
        public bool IsFailed { get; set; }
        public bool IsSelected { get; set; } = false;
    }
}
